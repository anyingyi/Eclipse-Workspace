import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Problem {
	
	
	
	int itemNumber;
	double capacity;
	double[] values;
	double[] weights;
	double bestValue;
	double[] density;
	int[] densityOrder;
	int[] valueOrder;
	List<Integer> densityList;
	List<Integer> valueList;
	
	
	public Problem()
	{
		itemNumber=4;
		capacity=8;
		values= new double[] {3,4,5,6};
		weights=new double[] {2,3,4,5};
		initial();
	}
	
	private void initial()
	{
		List<Item> list=new ArrayList<>();
		for(int i=0;i<itemNumber;i++)
			list.add(new Item(i,values[i],weights[i]));
		Collections.sort(list);
		Collections.reverse(list);
		densityOrder=new int[itemNumber];
		densityList=new ArrayList<>();
		for(int i=0;i<itemNumber;i++)
		{
			densityOrder[i]=list.get(i).getID();
			densityList.add(densityOrder[i]);
		}
	}
	
	public static Problem getProblem() { Problem prob=new Problem(); return prob;}
	public int getItemNumber(){	return itemNumber;}
	
	public double getCapacity(){	return capacity;}
	
	public double getItemValue(int x){	return values[x];}
	
	public double getItemWeight(int x){	return weights[x];}
	
	public double getBestValue(){	return bestValue;}
		
	public int[] getDensityOrder(){	return densityOrder;}
	
	public int[] getValueOrder(){	return valueOrder;}
	
	public List<Integer> getDensityList(){	return densityList;}
	
	public List<Integer> getValueList(){	return valueList;}
}

class Item implements Comparable<Item>
{
	int id;
	double value;
	double weight;
	double density;
	public Item(int id,double value,double weight) {
		this.id=id;
		this.value=value;
		this.weight=weight;
		density=value/weight;
	}
	
	public int getID() { return id; }
	public double getValue() { return value;}
	public double getWeight() { return weight;}
	public double getDensity() { return density; }
	
	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(Item o) {
		if (this.density > o.density) {
			return 1;
		} else if (this.density == o.density) {
			return 0;
		} else {
			return -1;
		}
	}
}
